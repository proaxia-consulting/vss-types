export { EntityAnnotation, FieldControlType as AnnotationFieldControlType, type FieldControlTypeType as AnnotationFieldControlTypeType } from "dbme/c/odata/v2/entityType";
export declare const ModelName: {
    readonly Avatar: "avatar";
    readonly Calendar: "cal";
    readonly Device: "device";
    readonly HierarchyAssignment: "HAS";
    readonly Local: "local";
    readonly i18n: "i18n";
    readonly TestMode: "TestMode";
    readonly Translate: "i18n";
    readonly ui: "ui";
    readonly internal: "internal";
    /** @deprecated Use unnamed model instead! */
    readonly SAPOData: "SAPOData";
};
export declare const HttpHeaderName: {
    readonly timezoneOffset: "dbme-timezone_offset_minutes";
    readonly timezoneName: "dbme-timezone_name";
    readonly DBMEComponent: "dbme-component";
    readonly DBMEMessage: "dbme-message";
    readonly HierarchyId: "dbme-hierarchy-id";
    readonly Data: "dbme-data";
};
export declare const EntityGroup: {
    readonly Create: "DBME";
};
export declare const EntitySet: {
    readonly App: "CMNAppSet";
    readonly AbsenceType: "CMNAbsenceTypeSet";
    readonly AddressTitle: "CMNAddrTitleSet";
    readonly AllocationFieldFilter: "WPLAllocationFieldFilterSet";
    readonly AllocationInterval: "WPLIntervalSet";
    readonly AllocationIntervalCreate: "WPLIntervalCreateSet";
    readonly AllocationIntervalText: "WPLIntervalTextSet";
    readonly CalendarViews: "CMNCalendarViewSet";
    readonly Country: "CMNCountrySet";
    readonly Demand: "WPLDemandSet";
    readonly DemandCreate: "WPLDemandCreateSet";
    readonly DemandRoles: "WPLDemandDDRolesSet";
    readonly DemandType: "WPLDemandTypeSet";
    readonly DemandTypeCommon: "CMNDemandTypeSet";
    readonly UIFilters: "CMNFiltersSet";
    readonly HierarchyPath: "HASNodePathSet";
    readonly Interval: "RPLIntervalSet";
    readonly IntervalCreate: "RPLIntervalCreateSet";
    readonly IntervalType: "CMNIntervalTypeSet";
    readonly MakeCode: "CMNMakeSet";
    readonly MileageUom: "CMNMileageUomSet";
    readonly MimeTypes: "CMNMimeTypeSet";
    readonly ModelCode: "CMNModelSet";
    readonly OrderType: "CMNOrderTypeSet";
    readonly PlanningMode: "WPLPlanningModeSet";
    readonly PlannerSortVariant: "WPLSortVariantSet";
    readonly Region: "CMNCountryRegionSet";
    readonly Resource: "CMNResourceSet";
    readonly ResourceAssignment: "HASAssignmentSet";
    readonly ResourceAvatar: "CMNResourceAvatarSet";
    readonly ResourceStatus: "CMNResourceStatusSet";
    readonly ResourceRole: "CMNResourceRoleSet";
    readonly ResourceType: "CMNResourceTypeSet";
    readonly ReservationType: "CMNReservationTypeSet";
    readonly TeamMembers: "HASTeamMembersSet";
    readonly TimeStep: "CMNTimeStepSet";
    readonly TreeNode: "HASTreeNodeSet";
    readonly TreeNodeCreate: "HASTreeNodeCreateSet";
    readonly TodoAllocationProposal: "TDOAllocationProposalSet";
    readonly TodoBusinessOrderUserStatus: "TDOBusinessOrderUserStatusSet";
    readonly TodoDecTreeItem: "TDODecisionTreeItemSet";
    readonly TodoLocation: "TDOLocationSet";
    readonly TodoLocationGroup: "TDOLocationGroupSet";
    readonly TodoMeasuringPoint: "TDOMeasuringPointSet";
    readonly TodoOrder: "TDOOrderSet";
    readonly TodoOrderList: "TDOOrderListSet";
    readonly TodoOrderAction: "TDOActionSet";
    readonly TodoOrderAgreement: "TDOOrderAgreementSet";
    readonly TodoOrderAttachment: "TDOOrderAttachmentSet";
    readonly TodoOrderCommChannel: "TDOCommChannel";
    readonly TodoOrderDemand: "TDODemandSet";
    readonly TodoOrderFields: "TDOScreenFieldSet";
    readonly TodoOrderHistory: "TDOOrderHistorySet";
    readonly TodoOrderNote: "TDOOrderNoteSet";
    readonly TodoOrderParameter: "TDOOrderParameterSet";
    readonly TodoOrderParameterDemand: "TDOOrderParameterDemandSet";
    readonly TodoVehiCust: "TDOVehicleCustomerSet";
    readonly TodoVehiCustSH: "TDOVehicleCustomerMDSet";
    readonly TodoResource: "TDOResourceSet";
    readonly TodoRole: "TDORoleSet";
    readonly TodoStatus: "TDOStatusSet";
    readonly TodoStatusAction: "TDOStatusActionSet";
    readonly TodoScreens: "TDOServiceScreenSet";
    readonly TodoServiceSection: "TDOServiceSectionSet";
    readonly TodoServiceSectionField: "TDOServiceSectionFieldSet";
    readonly TodoServiceItem: "TDOServiceItemSet";
    readonly TodoTimeSlot: "TDOTimeSlotsSet";
    readonly TodoUser: "TDOUserSet";
    readonly TodoWorkItem: "TDOWorkItemSet";
    readonly TodoWorkshop: "TDOWorkshopSet";
    readonly UIAppSettings: "CMNUISettingsSet";
    readonly UserHierarchyAsgn: "CMNHierarchyAsgnSet";
    readonly VehicleContract: "TDOVehicleContractSet";
    readonly VehicleDeferredJob: "TDOVehicleDeferredJobSet";
    readonly VehicleRecall: "TDOVehicleRecallSet";
    readonly VehicleServiceHistory: "TDOVehicleServiceHistorySet";
    readonly VehicleWarranty: "TDOVehicleWarrantySet";
    readonly WorkingModel: "CMNWorkingModelSet";
    readonly WorkingHours: "CMNWorkingHoursSet";
};
export type EntitySetType = (typeof EntitySet)[keyof typeof EntitySet];
export declare const Uxfc: {
    readonly Hidden: 0;
    readonly Readonly: 1;
    readonly Optional: 3;
    readonly Mandatory: 7;
};
export type UxfcType = (typeof Uxfc)[keyof typeof Uxfc];
export declare const Action: {
    readonly Create: "";
    readonly Read: "R";
    readonly Update: "U";
    readonly Delete: "D";
};
export type ActionType = (typeof Action)[keyof typeof Action];
export declare const Flag: {
    readonly yes: "yes";
    readonly no: "no";
};
export declare const UnitOfMeasure: {
    readonly Hours: "H";
    readonly Seconds: "SEC";
    readonly Mile: "mile";
    readonly Km: "km";
};
